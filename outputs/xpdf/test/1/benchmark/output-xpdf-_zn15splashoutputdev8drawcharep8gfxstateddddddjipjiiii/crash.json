{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "96.30",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming the necessary includes for SplashOutputDev, GfxState, CharCode, Unicode, and GBool are present\\n\\n// Example definitions for types that might be used in the function signature\\nusing CharCode = uint32_t; // Example type for CharCode\\nusing GBool = bool; // Example type for GBool\\nclass GfxState {}; // Placeholder definition for GfxState\\nclass Unicode {}; // Placeholder definition for Unicode\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double ascent, double descent, CharCode code, int fontSize,\\n                  Unicode *unicode, int unicodeLength, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Must not be NULL\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double width = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double height = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double ascent = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double descent = fuzzed_data.ConsumeFloatingPoint<double>();\\n    CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n    int fontSize = fuzzed_data.ConsumeIntegral<int>();\\n    \\n    // Unicode pointer must not be NULL, allocate a Unicode object\\n    int unicodeLength = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Ensure non-zero length\\n    Unicode *unicode = new Unicode[unicodeLength]; // Allocate memory for Unicode array\\n    fuzzed_data.ConsumeData(unicode, sizeof(Unicode) * unicodeLength); // Fill the Unicode array\\n\\n    GBool flag1 = fuzzed_data.ConsumeBool();\\n    GBool flag2 = fuzzed_data.ConsumeBool();\\n    GBool flag3 = fuzzed_data.ConsumeBool();\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, ascent, descent, code, fontSize, unicode, unicodeLength, flag1, flag2, flag3);\\n\\n    // Clean up\\n    delete[] unicode; // Free allocated memory\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <xpdf/GfxState.h> // Include the header for GfxState\\n#include <xpdf/Object.h> // Include the header for Object\\n#include <xpdf/Dict.h> // Include the header for Dict\\n#include <xpdf/Ref.h> // Include the header for Ref\\n#include <xpdf/SplashOutputDev.h> // Include the header for SplashOutputDev\\n\\n// Using the existing definitions from the included headers\\n// using CharCode = uint32_t; // This is already defined in the xpdf headers\\n// using Unicode = uint32_t;   // This is already defined in the xpdf headers\\n// using GBool = int;         // This is already defined in the xpdf headers\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a GfxState object\\n    GfxState gfxState(72.0, 72.0, nullptr, 0, false); // Example constructor call with dummy values\\n\\n    // Consume doubles\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and int\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode pointer\\n    std::string unicodeString = stream.ConsumeRandomLengthString();\\n    std::vector<Unicode> unicodeData(unicodeString.begin(), unicodeString.end());\\n    Unicode *unicodePtr = unicodeData.empty() ? nullptr : unicodeData.data();\\n\\n    // Consume remaining parameters\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev::drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}