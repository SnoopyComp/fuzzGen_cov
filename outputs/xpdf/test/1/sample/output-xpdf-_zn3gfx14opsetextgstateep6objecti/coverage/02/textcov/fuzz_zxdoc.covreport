_ZN3Gfx14opSetExtGStateEP6Objecti:
   15|      3|    void opSetExtGState(Object *obj, int state) {
   16|       |        // Function implementation
   17|       |        // Example implementation (to illustrate usage)
   18|      3|        if (obj) {
  ------------------
  |  Branch (18:13): [True: 3, False: 0]
  ------------------
   19|       |            // Perform operations based on the state
   20|      3|        }
   21|      3|    }
LLVMFuzzerTestOneInput:
   24|      3|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|       |    // Create a FuzzedDataProvider instance
   26|      3|    FuzzedDataProvider fuzzed_data(data, size);
   27|       |
   28|       |    // Create an Object instance (ensure it's not NULL)
   29|      3|    Object obj;
   30|       |
   31|       |    // Consume an integer value for the second parameter
   32|      3|    int state = fuzzed_data.ConsumeIntegral<int>();
   33|       |
   34|       |    // Optionally, consume more data to vary the state
   35|       |    // For example, we can consume a boolean or another integer to modify behavior
   36|      3|    bool someFlag = fuzzed_data.ConsumeBool();
   37|       |
   38|       |    // Call the function under test
   39|      3|    Gfx::opSetExtGState(&obj, state);
   40|       |
   41|       |    // You can also add logic that uses the `someFlag` to change behavior
   42|      3|    if (someFlag) {
  ------------------
  |  Branch (42:9): [True: 0, False: 3]
  ------------------
   43|       |        // Perform additional operations if the flag is true
   44|       |        // This could involve calling the function again with different parameters
   45|      0|        int newState = fuzzed_data.ConsumeIntegral<int>();
   46|      0|        Gfx::opSetExtGState(&obj, newState);
   47|      0|    }
   48|       |
   49|      3|    return 0;
   50|      3|}
_ZN6ObjectC2Ev:
    8|      3|    Object() {
    9|       |        // Initialize the object if needed
   10|      3|    }

