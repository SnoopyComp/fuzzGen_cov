{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include <memory> // Include for std::unique_ptr\\n\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\" // Include Gfx.h for GfxState and related types\\n#include \"/src/xpdf-4.05/xpdf/Object.h\" // Include Object.h for Object type definition\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\" // Include Dict.h for Dict type definition\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Correct path to SplashOutputDev.h\\n\\n// Assuming the necessary enums and types are defined in SplashOutputDev.h\\n// You may need to adjust the parameters based on your application's requirements\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Initialize FuzzedDataProvider\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create a GfxState object with appropriate constructor parameters\\n    double hDPI = provider.ConsumeFloatingPoint<double>();\\n    double vDPI = provider.ConsumeFloatingPoint<double>();\\n    PDFRectangle pageBox = {0, 0, 100, 100}; // Example values, adjust as needed\\n    int rotate = provider.ConsumeIntegral<int>() % 360; // Example rotation\\n    GBool upsideDown = provider.ConsumeBool() ? gTrue : gFalse;\\n\\n    std::unique_ptr<GfxState> gfxState = std::make_unique<GfxState>(hDPI, vDPI, &pageBox, rotate, upsideDown);\\n\\n    // Create a SplashOutputDev object with appropriate constructor parameters\\n    SplashColorMode colorMode = SplashColorMode::eColorModeRGB; // Example color mode\\n    int bitmapRowPad = 4; // Example padding\\n    GBool reverseVideo = gFalse; // Example flag\\n    SplashColorPtr paperColor = nullptr; // Example color, adjust as needed\\n\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor);\\n\\n    // Call the function to fuzz\\n    // Since doUpdateFont is private, you might need to create a public wrapper function in SplashOutputDev\\n    // For example, you can create a public method that calls doUpdateFont internally\\n    splashOutputDev.updateFont(gfxState.get()); // Assuming you create this method\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n\\n// Include necessary headers for xpdf\\n#include \"/src/xpdf-4.05/xpdf/Object.h\" // Include Object header for Ref and Object types\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"   // Include Dict header for Dict type\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"  // Include Stream header for Stream type\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Correct header for SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/PDFRectangle.h\" // Include PDFRectangle header for PDFRectangle type\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\" // Include GfxState header\\n\\n// Wrapper function to access the private doUpdateFont method\\nclass SplashOutputDevWrapper : public SplashOutputDev {\\npublic:\\n    SplashOutputDevWrapper(SplashColorMode mode, int size, GBool useColor, SplashColor paperColor)\\n        : SplashOutputDev(mode, size, useColor, paperColor) {}\\n\\n    void updateFont(GfxState *state) {\\n        doUpdateFont(state); // This function is declared in SplashOutputDev.h\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a GfxState object with valid constructor arguments\\n    double hDPIA = 72.0; // Example DPI\\n    double vDPIA = 72.0; // Example DPI\\n    PDFRectangle pageBox = {0, 0, 100, 100}; // Example page box\\n    int rotateA = 0; // No rotation\\n    GBool upsideDown = gFalse; // Not upside down\\n    GfxState gfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n    \\n    // Create a SplashOutputDev object using the wrapper\\n    SplashColor paperColor = {0xff, 0xff, 0xff}; // White paper color\\n    SplashOutputDevWrapper splashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n\\n    // Call the public wrapper function to access doUpdateFont\\n    splashOutputDev.updateFont(&gfxState);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}