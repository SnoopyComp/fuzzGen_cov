{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n\\n// Include necessary headers for font handling\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Corrected path for SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\" // Including a relevant header for Unicode handling\\n#include \"/src/xpdf-4.05/splash/SplashTypes.h\" // Include SplashTypes for SplashColorMode\\n#include \"/src/xpdf-4.05/xpdf/FoFiTrueType.h\" // Include for FoFiTrueType\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\" // Include for FoFiType1\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1C.h\" // Include for FoFiType1C\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\" // Include for FoFiIdentifier\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Create a GfxState object with required parameters\\n  double hDPI = 72.0; // Example DPI value\\n  double vDPI = 72.0; // Example DPI value\\n  PDFRectangle* pageBox = nullptr; // Assuming a null page box for simplicity\\n  int rotate = 0; // No rotation\\n  GBool upsideDown = gFalse; // Not upside down\\n  GfxState* gfx_state = new GfxState(hDPI, vDPI, pageBox, rotate, upsideDown);\\n\\n  // Consume parameters for the drawChar function\\n  double x = provider.ConsumeFloatingPoint<double>();\\n  double y = provider.ConsumeFloatingPoint<double>();\\n  double width = provider.ConsumeFloatingPoint<double>();\\n  double height = provider.ConsumeFloatingPoint<double>();\\n  double dx = provider.ConsumeFloatingPoint<double>();\\n  double dy = provider.ConsumeFloatingPoint<double>();\\n  CharCode char_code = provider.ConsumeIntegral<CharCode>();\\n  int font_size = provider.ConsumeIntegral<int>();\\n  \\n  // Consume Unicode characters\\n  int unicode_length = provider.ConsumeIntegralInRange<int>(0, 10); // Limit length for Unicode array\\n  std::vector<Unicode> unicode_chars(unicode_length);\\n  for (int i = 0; i < unicode_length; ++i) {\\n    unicode_chars[i] = provider.ConsumeIntegral<Unicode>();\\n  }\\n\\n  int unicode_count = unicode_length; // Number of Unicode characters\\n  GBool fill = provider.ConsumeBool() ? gTrue : gFalse;\\n  GBool stroke = provider.ConsumeBool() ? gTrue : gFalse;\\n  GBool clip = provider.ConsumeBool() ? gTrue : gFalse;\\n\\n  // Create a SplashOutputDev object with required parameters\\n  SplashColorMode colorMode = splashModeRGB8; // Changed to splashModeRGB8\\n  int bitmapRowPad = 4; // Example bitmap row padding\\n  GBool reverseVideo = gFalse; // Not reverse video\\n  SplashColorPtr paperColor = nullptr; // Assuming a null paper color for simplicity\\n  GBool bitmapTopDown = gTrue; // Bitmap top down\\n  GBool allowAntialias = gTrue; // Allow antialiasing\\n  SplashOutputDev* splash_dev = new SplashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n\\n  // Call the function under test\\n  splash_dev->drawChar(gfx_state, x, y, width, height, dx, dy, char_code, font_size, unicode_chars.data(), unicode_count, fill, stroke, clip);\\n\\n  // Clean up\\n  delete splash_dev;\\n  delete gfx_state;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Correct path for SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\" // Include the correct header for CharCode\\n#include \"/src/xpdf-4.05/splash/SplashTypes.h\" // Updated path for SplashTypes\\n#include \"/src/xpdf-4.05/xpdf/FoFiTrueType.h\" // Include the header for FoFiTrueType\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\" // Include the header for FoFiType1\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1C.h\" // Include the header for FoFiType1C\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\" // Include the header for FoFiIdentifier\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a GfxState object with appropriate constructor parameters\\n    double hDPI = 72.0; // Example value\\n    double vDPI = 72.0; // Example value\\n    PDFRectangle *pageBox = nullptr; // Assuming a null pointer for simplicity\\n    int rotate = 0; // Example rotation\\n    GBool upsideDown = gFalse; // Example boolean\\n\\n    GfxState gfx_state(hDPI, vDPI, pageBox, rotate, upsideDown);\\n\\n    // Consume values for the parameters\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double xScale = stream.ConsumeFloatingPoint<double>();\\n    double yScale = stream.ConsumeFloatingPoint<double>();\\n    \\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Use a vector to hold Unicode characters\\n    size_t unicode_size = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 character\\n    std::vector<Unicode> unicodeChars(unicode_size);\\n    for (size_t i = 0; i < unicode_size; ++i) {\\n        unicodeChars[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n    \\n    // Consume additional integer parameter\\n    int additionalParam = stream.ConsumeIntegral<int>();\\n    \\n    // Consume boolean values\\n    GBool boolParam1 = stream.ConsumeBool() ? gTrue : gFalse;\\n    GBool boolParam2 = stream.ConsumeBool() ? gTrue : gFalse;\\n    GBool boolParam3 = stream.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Create a SplashOutputDev object with appropriate constructor parameters\\n    SplashColorMode colorMode = splashModeRGB8; // Changed to splashModeRGB8\\n    int bitmapRowPad = 4; // Example row padding\\n    GBool reverseVideo = gFalse; // Example boolean\\n    SplashColorPtr paperColor = nullptr; // Assuming a null pointer for simplicity\\n    GBool bitmapTopDown = gTrue; // Example boolean\\n    GBool allowAntialias = gTrue; // Example boolean\\n\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(&gfx_state, x, y, width, height, xScale, yScale, charCode, fontSize,\\n                              unicodeChars.data(), additionalParam, boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}