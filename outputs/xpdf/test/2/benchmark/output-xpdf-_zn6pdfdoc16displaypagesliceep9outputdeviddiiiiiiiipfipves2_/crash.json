{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n#include <string> // Include for std::string\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"gmem.h\"\\n\\n// Dummy implementations of the pure virtual methods in OutputDev for fuzzing purposes\\nclass CustomOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gFalse; }\\n    GBool useDrawChar() override { return gFalse; }\\n    GBool interpretType3Chars() override { return gFalse; }\\n    // Implement other required methods if necessary\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Initialize parameters for the function call\\n    int page_number = provider.ConsumeIntegralInRange<int>(1, 100); // Assuming a maximum of 100 pages\\n    double hdpi = provider.ConsumeFloatingPoint<double>();\\n    double vdpi = provider.ConsumeFloatingPoint<double>();\\n    int rotation = provider.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees\\n    GBool use_media_box = provider.ConsumeBool() ? gTrue : gFalse;\\n    GBool crop = provider.ConsumeBool() ? gTrue : gFalse;\\n    GBool printing = provider.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Consume additional parameters\\n    int param1 = provider.ConsumeIntegral<int>();\\n    int param2 = provider.ConsumeIntegral<int>();\\n    int param3 = provider.ConsumeIntegral<int>();\\n    int param4 = provider.ConsumeIntegral<int>();\\n\\n    // Create an OutputDev object (using the custom implementation)\\n    OutputDev* output_dev = new CustomOutputDev();\\n\\n    // Create a PDFDoc object (using a valid constructor)\\n    std::string fileName = provider.ConsumeRandomLengthString(10) + \".pdf\"; // Generate a random file name with .pdf extension\\n    GString gFileName(fileName.c_str()); // Use stack allocation for GString\\n    PDFDoc* pdf_doc = new PDFDoc(&gFileName); // Use the constructor that accepts GString\\n\\n    // Check if the PDFDoc was initialized properly\\n    if (!pdf_doc->isOk()) {\\n        // Clean up and return if the PDFDoc is not valid\\n        delete output_dev;\\n        delete pdf_doc; // Ensure pdf_doc is deleted only if it was allocated\\n        return 0;\\n    }\\n\\n    // Call the function under test\\n    pdf_doc->displayPageSlice(output_dev, page_number, hdpi, vdpi, rotation, use_media_box, crop, printing, param1, param2, param3, param4, nullptr, nullptr);\\n\\n    // Clean up\\n    delete output_dev;\\n    delete pdf_doc;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n#include <string>\\n#include <fstream> // Include for file handling\\n#include <cstdio>  // Include for std::remove\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\n// Custom OutputDev implementation to provide concrete implementations for pure virtual methods\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    virtual GBool upsideDown() override { return gFalse; }\\n    virtual GBool useDrawChar() override { return gFalse; }\\n    virtual GBool interpretType3Chars() override { return gFalse; }\\n};\\n\\n// Example abort check callback function\\nGBool abortCheck(void *data) {\\n    return gFalse; // Always continue in this example\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create a temporary PDF file from the fuzz input\\n    std::string tempFileName = \"temp_fuzzed_input.pdf\";\\n    std::ofstream outFile(tempFileName, std::ios::binary);\\n    if (!outFile) {\\n        return 0; // Failed to create file, exit early\\n    }\\n    outFile.write(reinterpret_cast<const char*>(data), size);\\n    outFile.close();\\n\\n    // Create a dummy OutputDev instance\\n    MyOutputDev *output_dev = new MyOutputDev();\\n\\n    // Consume parameters for the function\\n    int page_number = provider.ConsumeIntegral<int>();\\n    double hdpi = provider.ConsumeFloatingPoint<double>();\\n    double vdpi = provider.ConsumeFloatingPoint<double>();\\n    int rotation = provider.ConsumeIntegral<int>();\\n    bool use_media_box = provider.ConsumeBool();\\n    bool crop = provider.ConsumeBool();\\n    bool printing = provider.ConsumeBool();\\n    int param1 = provider.ConsumeIntegral<int>();\\n    int param2 = provider.ConsumeIntegral<int>();\\n    int param3 = provider.ConsumeIntegral<int>();\\n    int param4 = provider.ConsumeIntegral<int>();\\n\\n    // Create a valid PDFDoc instance with the temporary file\\n    GString dummyFileName(tempFileName.c_str());\\n    PDFDoc pdf_doc(&dummyFileName); // Use a valid constructor\\n\\n    // Call the function under test with a valid abort check callback\\n    pdf_doc.displayPageSlice(output_dev, page_number, hdpi, vdpi, rotation, use_media_box, crop, printing, param1, param2, param3, param4, abortCheck, nullptr);\\n\\n    // Clean up\\n    delete output_dev;\\n\\n    // Remove the temporary file\\n    std::remove(tempFileName.c_str());\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}