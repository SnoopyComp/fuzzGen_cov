{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include <string> // Include for std::string\\n\\n#include \"gmem.h\"\\n#include \"gtypes.h\" // Assuming gtypes.h defines GBool and related types\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Updated to the correct path for PDFDoc.h\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include the correct OutputDev header\\n\\n// Concrete subclass of OutputDev for testing purposes\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    MyOutputDev() : OutputDev() {}\\n\\n    // Implement pure virtual methods\\n    virtual GBool upsideDown() override { return gFalse; }\\n    virtual GBool useDrawChar() override { return gFalse; }\\n    virtual GBool interpretType3Chars() override { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create a dummy OutputDev instance using the concrete subclass\\n    MyOutputDev *output_dev = new MyOutputDev();\\n\\n    // Consume parameters for the function\\n    int page_number = provider.ConsumeIntegral<int>();\\n    double hdpi = provider.ConsumeFloatingPoint<double>();\\n    double vdpi = provider.ConsumeFloatingPoint<double>();\\n    int rotate = provider.ConsumeIntegral<int>();\\n    GBool use_media_box = provider.ConsumeBool() ? gTrue : gFalse;\\n    GBool crop = provider.ConsumeBool() ? gTrue : gFalse;\\n    GBool printing = provider.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Consume additional parameters\\n    int param1 = provider.ConsumeIntegral<int>();\\n    int param2 = provider.ConsumeIntegral<int>();\\n    int param3 = provider.ConsumeIntegral<int>();\\n    int param4 = provider.ConsumeIntegral<int>();\\n\\n    // Create a dummy pointer for the loop parameter (adjust as necessary)\\n    void *infinite_loop_ptr = reinterpret_cast<void *>(0xDEADBEEF); // Example pointer\\n\\n    // Call the function under test\\n    // Create a valid PDFDoc instance. Replace with appropriate constructor parameters.\\n    GString *fileNameA = new GString(\"dummy.pdf\"); // Example file name\\n    PDFDoc pdf_doc(fileNameA); // Use appropriate constructor\\n\\n    // Use a valid function pointer for abortCheckCbk, if needed\\n    GBool (*abortCheckCbk)(void *) = nullptr; // Set to nullptr or a valid function as needed\\n\\n    pdf_doc.displayPageSlice(output_dev, page_number, hdpi, vdpi, rotate,\\n                              use_media_box, crop, printing,\\n                              param1, param2, param3, param4,\\n                              infinite_loop_ptr, // Pass the pointer directly\\n                              abortCheckCbk); // Pass the function pointer\\n\\n    // Clean up\\n    delete output_dev;\\n    delete fileNameA; // Clean up GString instance\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.47",
        "coverage_diff": "0.00044881504812739934",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n\\n// Include necessary headers for GString and PDFCore\\n#include \"GString.h\" \\n#include \"PDFCore.h\"\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"gmem.h\"\\n#include \"gfile.h\"\\n\\n// Derived class to implement pure virtual methods of OutputDev\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gFalse; }\\n    GBool useDrawChar() override { return gFalse; }\\n    GBool interpretType3Chars() override { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create an OutputDev instance\\n    MyOutputDev* output_device = new MyOutputDev();\\n\\n    // Consume parameters for the function\\n    int page_number = provider.ConsumeIntegral<int>();\\n    double hdpi = provider.ConsumeFloatingPoint<double>();\\n    double vdpi = provider.ConsumeFloatingPoint<double>();\\n    int rotation = provider.ConsumeIntegral<int>();\\n    GBool use_media_box = provider.ConsumeBool() ? gTrue : gFalse;\\n    GBool crop = provider.ConsumeBool() ? gTrue : gFalse;\\n    GBool printing = provider.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Consume additional integer parameters\\n    int param1 = provider.ConsumeIntegral<int>();\\n    int param2 = provider.ConsumeIntegral<int>();\\n    int param3 = provider.ConsumeIntegral<int>();\\n    int param4 = provider.ConsumeIntegral<int>();\\n\\n    // Create a GString for PDFDoc constructor\\n    GString* fileNameA = new GString(\"dummy.pdf\"); // Use a dummy filename\\n\\n    // Call the function under test\\n    PDFDoc pdf_doc(fileNameA); // Using the constructor that requires a GString\\n\\n    // Check if the PDF document is valid and has pages\\n    if (pdf_doc.isOk()) {\\n        int total_pages = pdf_doc.getNumPages(); // Get total number of pages\\n        if (page_number >= 0 && page_number < total_pages) { // Ensure valid page number\\n            pdf_doc.displayPageSlice(output_device, page_number, hdpi, vdpi, rotation,\\n                                      use_media_box, crop, printing, param1, param2,\\n                                      param3, param4, nullptr, nullptr); // Pass nullptr for abortCheckCbk\\n        }\\n    }\\n\\n    // Cleanup\\n    delete output_device;\\n    // No need to delete fileNameA since PDFDoc takes ownership of it\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}