LLVMFuzzerTestOneInput:
   25|     27|extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
   26|     27|    FuzzedDataProvider provider(data, size);
   27|       |
   28|       |    // Create an OutputDev instance
   29|     27|    MyOutputDev* output_device = new MyOutputDev();
   30|       |
   31|       |    // Consume parameters for the function
   32|     27|    int page_number = provider.ConsumeIntegral<int>();
   33|     27|    double hdpi = provider.ConsumeFloatingPoint<double>();
   34|     27|    double vdpi = provider.ConsumeFloatingPoint<double>();
   35|     27|    int rotation = provider.ConsumeIntegral<int>();
   36|     27|    GBool use_media_box = provider.ConsumeBool() ? gTrue : gFalse;
  ------------------
  |  |   17|     12|#define gTrue 1
  ------------------
                  GBool use_media_box = provider.ConsumeBool() ? gTrue : gFalse;
  ------------------
  |  |   18|     15|#define gFalse 0
  ------------------
  |  Branch (36:27): [True: 12, False: 15]
  ------------------
   37|     27|    GBool crop = provider.ConsumeBool() ? gTrue : gFalse;
  ------------------
  |  |   17|     12|#define gTrue 1
  ------------------
                  GBool crop = provider.ConsumeBool() ? gTrue : gFalse;
  ------------------
  |  |   18|     15|#define gFalse 0
  ------------------
  |  Branch (37:18): [True: 12, False: 15]
  ------------------
   38|     27|    GBool printing = provider.ConsumeBool() ? gTrue : gFalse;
  ------------------
  |  |   17|     13|#define gTrue 1
  ------------------
                  GBool printing = provider.ConsumeBool() ? gTrue : gFalse;
  ------------------
  |  |   18|     14|#define gFalse 0
  ------------------
  |  Branch (38:22): [True: 13, False: 14]
  ------------------
   39|       |
   40|       |    // Consume additional integer parameters
   41|     27|    int param1 = provider.ConsumeIntegral<int>();
   42|     27|    int param2 = provider.ConsumeIntegral<int>();
   43|     27|    int param3 = provider.ConsumeIntegral<int>();
   44|     27|    int param4 = provider.ConsumeIntegral<int>();
   45|       |
   46|       |    // Create a GString for PDFDoc constructor
   47|     27|    GString* fileNameA = new GString("dummy.pdf"); // Use a dummy filename
   48|       |
   49|       |    // Call the function under test
   50|     27|    PDFDoc pdf_doc(fileNameA); // Using the constructor that requires a GString
   51|       |
   52|       |    // Check if the PDF document is valid and has pages
   53|     27|    if (pdf_doc.isOk()) {
  ------------------
  |  Branch (53:9): [True: 0, False: 27]
  ------------------
   54|      0|        int total_pages = pdf_doc.getNumPages(); // Get total number of pages
   55|      0|        if (page_number >= 0 && page_number < total_pages) { // Ensure valid page number
  ------------------
  |  Branch (55:13): [True: 0, False: 0]
  |  Branch (55:33): [True: 0, False: 0]
  ------------------
   56|      0|            pdf_doc.displayPageSlice(output_device, page_number, hdpi, vdpi, rotation,
   57|      0|                                      use_media_box, crop, printing, param1, param2,
   58|      0|                                      param3, param4, nullptr, nullptr); // Pass nullptr for abortCheckCbk
   59|      0|        }
   60|      0|    }
   61|       |
   62|       |    // Cleanup
   63|     27|    delete output_device;
   64|       |    // No need to delete fileNameA since PDFDoc takes ownership of it
   65|       |
   66|     27|    return 0;
   67|     27|}

_ZN7GStringC2Ev:
  129|     54|GString::GString() {
  130|     54|  s = NULL;
  131|     54|  resize(length = 0);
  132|     54|  s[0] = '\0';
  133|     54|}
_ZN7GStringC2EPKc:
  135|     27|GString::GString(const char *sA) {
  136|     27|  int n = (int)strlen(sA);
  137|       |
  138|     27|  s = NULL;
  139|     27|  resize(length = n);
  140|     27|  memcpy(s, sA, n + 1);
  141|     27|}
_ZN7GStringC2EPS_:
  157|     27|GString::GString(GString *str) {
  158|     27|  s = NULL;
  159|     27|  resize(length = str->getLength());
  160|     27|  memcpy(s, str->getCString(), length + 1);
  161|     27|}
_ZN7GString7formatvEPKcP13__va_list_tag:
  196|     27|GString *GString::formatv(const char *fmt, va_list argList) {
  197|     27|  GString *s;
  198|       |
  199|     27|  s = new GString();
  200|     27|  s->appendfv(fmt, argList);
  201|     27|  return s;
  202|     27|}
_ZN7GStringD2Ev:
  204|    108|GString::~GString() {
  205|    108|  delete[] s;
  206|    108|}
_ZN7GString6appendEc:
  214|    810|GString *GString::append(char c) {
  215|    810|  if (length > INT_MAX - 1) {
  ------------------
  |  Branch (215:7): [True: 0, False: 810]
  ------------------
  216|      0|    gMemError("Integer overflow in GString::append()");
  217|      0|  }
  218|    810|  resize(length + 1);
  219|    810|  s[length++] = c;
  220|    810|  s[length] = '\0';
  221|    810|  return this;
  222|    810|}
_ZN7GString6appendEPKci:
  248|     81|GString *GString::append(const char *str, int lengthA) {
  249|     81|  if (lengthA < 0 || length > INT_MAX - lengthA) {
  ------------------
  |  Branch (249:7): [True: 0, False: 81]
  |  Branch (249:22): [True: 0, False: 81]
  ------------------
  250|      0|    gMemError("Integer overflow in GString::append()");
  251|      0|  }
  252|     81|  resize(length + lengthA);
  253|     81|  memcpy(s + length, str, lengthA);
  254|     81|  length += lengthA;
  255|     81|  s[length] = '\0';
  256|     81|  return this;
  257|     81|}
_ZN7GString8appendfvEPKcP13__va_list_tag:
  268|     27|GString *GString::appendfv(const char *fmt, va_list argList) {
  269|     27|  GStringFormatArg *args;
  270|     27|  int argsLen, argsSize;
  271|     27|  GStringFormatArg arg;
  272|     27|  int idx, width, prec;
  273|     27|  GBool reverseAlign, zeroFill;
  274|     27|  GStringFormatType ft;
  275|     27|  char buf[65];
  276|     27|  int len, i;
  277|     27|  const char *p0, *p1;
  278|     27|  const char *str;
  279|       |
  280|     27|  argsLen = 0;
  281|     27|  argsSize = 8;
  282|     27|  args = (GStringFormatArg *)gmallocn(argsSize, sizeof(GStringFormatArg));
  283|       |
  284|     27|  p0 = fmt;
  285|    108|  while (*p0) {
  ------------------
  |  Branch (285:10): [True: 81, False: 27]
  ------------------
  286|     81|    if (*p0 == '{') {
  ------------------
  |  Branch (286:9): [True: 27, False: 54]
  ------------------
  287|     27|      ++p0;
  288|     27|      if (*p0 == '{') {
  ------------------
  |  Branch (288:11): [True: 0, False: 27]
  ------------------
  289|      0|	++p0;
  290|      0|	append('{');
  291|     27|      } else {
  292|       |
  293|       |	// parse the format string
  294|     27|	if (!(*p0 >= '0' && *p0 <= '9')) {
  ------------------
  |  Branch (294:8): [True: 27, False: 0]
  |  Branch (294:22): [True: 27, False: 0]
  ------------------
  295|      0|	  break;
  296|      0|	}
  297|     27|	idx = *p0 - '0';
  298|     27|	for (++p0; *p0 >= '0' && *p0 <= '9'; ++p0) {
  ------------------
  |  Branch (298:13): [True: 27, False: 0]
  |  Branch (298:27): [True: 0, False: 27]
  ------------------
  299|      0|	  idx = 10 * idx + (*p0 - '0');
  300|      0|	}
  301|     27|	if (*p0 != ':') {
  ------------------
  |  Branch (301:6): [True: 0, False: 27]
  ------------------
  302|      0|	  break;
  303|      0|	}
  304|     27|	++p0;
  305|     27|	if (*p0 == '-') {
  ------------------
  |  Branch (305:6): [True: 0, False: 27]
  ------------------
  306|      0|	  reverseAlign = gTrue;
  ------------------
  |  |   17|      0|#define gTrue 1
  ------------------
  307|      0|	  ++p0;
  308|     27|	} else {
  309|     27|	  reverseAlign = gFalse;
  ------------------
  |  |   18|     27|#define gFalse 0
  ------------------
  310|     27|	}
  311|     27|	width = 0;
  312|     27|	zeroFill = *p0 == '0';
  313|     27|	for (; *p0 >= '0' && *p0 <= '9'; ++p0) {
  ------------------
  |  Branch (313:9): [True: 27, False: 0]
  |  Branch (313:23): [True: 0, False: 27]
  ------------------
  314|      0|	  width = 10 * width + (*p0 - '0');
  315|      0|	}
  316|     27|	if (width < 0) {
  ------------------
  |  Branch (316:6): [True: 0, False: 27]
  ------------------
  317|      0|	  width = 0;
  318|      0|	}
  319|     27|	if (*p0 == '.') {
  ------------------
  |  Branch (319:6): [True: 0, False: 27]
  ------------------
  320|      0|	  ++p0;
  321|      0|	  prec = 0;
  322|      0|	  for (; *p0 >= '0' && *p0 <= '9'; ++p0) {
  ------------------
  |  Branch (322:11): [True: 0, False: 0]
  |  Branch (322:25): [True: 0, False: 0]
  ------------------
  323|      0|	    prec = 10 * prec + (*p0 - '0');
  324|      0|	  }
  325|     27|	} else {
  326|     27|	  prec = 0;
  327|     27|	}
  328|     27|	for (ft = (GStringFormatType)0;
  329|    783|	     formatStrings[ft];
  ------------------
  |  Branch (329:7): [True: 783, False: 0]
  ------------------
  330|    783|	     ft = (GStringFormatType)(ft + 1)) {
  331|    783|	  if (!strncmp(p0, formatStrings[ft], strlen(formatStrings[ft]))) {
  ------------------
  |  Branch (331:8): [True: 27, False: 756]
  ------------------
  332|     27|	    break;
  333|     27|	  }
  334|    783|	}
  335|     27|	if (!formatStrings[ft]) {
  ------------------
  |  Branch (335:6): [True: 0, False: 27]
  ------------------
  336|      0|	  break;
  337|      0|	}
  338|     27|	p0 += strlen(formatStrings[ft]);
  339|     27|	if (*p0 != '}') {
  ------------------
  |  Branch (339:6): [True: 0, False: 27]
  ------------------
  340|      0|	  break;
  341|      0|	}
  342|     27|	++p0;
  343|       |
  344|       |	// fetch the argument
  345|     27|	if (idx > argsLen) {
  ------------------
  |  Branch (345:6): [True: 0, False: 27]
  ------------------
  346|      0|	  break;
  347|      0|	}
  348|     27|	if (idx == argsLen) {
  ------------------
  |  Branch (348:6): [True: 27, False: 0]
  ------------------
  349|     27|	  if (argsLen == argsSize) {
  ------------------
  |  Branch (349:8): [True: 0, False: 27]
  ------------------
  350|      0|	    argsSize *= 2;
  351|      0|	    args = (GStringFormatArg *)greallocn(args, argsSize,
  352|      0|						 sizeof(GStringFormatArg));
  353|      0|	  }
  354|     27|	  switch (ft) {
  ------------------
  |  Branch (354:12): [True: 0, False: 27]
  ------------------
  355|      0|	  case fmtIntDecimal:
  ------------------
  |  Branch (355:4): [True: 0, False: 27]
  ------------------
  356|      0|	  case fmtIntHex:
  ------------------
  |  Branch (356:4): [True: 0, False: 27]
  ------------------
  357|      0|	  case fmtIntOctal:
  ------------------
  |  Branch (357:4): [True: 0, False: 27]
  ------------------
  358|      0|	  case fmtIntBinary:
  ------------------
  |  Branch (358:4): [True: 0, False: 27]
  ------------------
  359|      0|	  case fmtSpace:
  ------------------
  |  Branch (359:4): [True: 0, False: 27]
  ------------------
  360|      0|	    args[argsLen].i = va_arg(argList, int);
  361|      0|	    break;
  362|      0|	  case fmtUIntDecimal:
  ------------------
  |  Branch (362:4): [True: 0, False: 27]
  ------------------
  363|      0|	  case fmtUIntHex:
  ------------------
  |  Branch (363:4): [True: 0, False: 27]
  ------------------
  364|      0|	  case fmtUIntOctal:
  ------------------
  |  Branch (364:4): [True: 0, False: 27]
  ------------------
  365|      0|	  case fmtUIntBinary:
  ------------------
  |  Branch (365:4): [True: 0, False: 27]
  ------------------
  366|      0|	    args[argsLen].ui = va_arg(argList, Guint);
  367|      0|	    break;
  368|      0|	  case fmtLongDecimal:
  ------------------
  |  Branch (368:4): [True: 0, False: 27]
  ------------------
  369|      0|	  case fmtLongHex:
  ------------------
  |  Branch (369:4): [True: 0, False: 27]
  ------------------
  370|      0|	  case fmtLongOctal:
  ------------------
  |  Branch (370:4): [True: 0, False: 27]
  ------------------
  371|      0|	  case fmtLongBinary:
  ------------------
  |  Branch (371:4): [True: 0, False: 27]
  ------------------
  372|      0|	    args[argsLen].l = va_arg(argList, long);
  373|      0|	    break;
  374|      0|	  case fmtULongDecimal:
  ------------------
  |  Branch (374:4): [True: 0, False: 27]
  ------------------
  375|      0|	  case fmtULongHex:
  ------------------
  |  Branch (375:4): [True: 0, False: 27]
  ------------------
  376|      0|	  case fmtULongOctal:
  ------------------
  |  Branch (376:4): [True: 0, False: 27]
  ------------------
  377|      0|	  case fmtULongBinary:
  ------------------
  |  Branch (377:4): [True: 0, False: 27]
  ------------------
  378|      0|	    args[argsLen].ul = va_arg(argList, Gulong);
  379|      0|	    break;
  380|      0|#ifdef LLONG_MAX
  381|      0|	  case fmtLongLongDecimal:
  ------------------
  |  Branch (381:4): [True: 0, False: 27]
  ------------------
  382|      0|	  case fmtLongLongHex:
  ------------------
  |  Branch (382:4): [True: 0, False: 27]
  ------------------
  383|      0|	  case fmtLongLongOctal:
  ------------------
  |  Branch (383:4): [True: 0, False: 27]
  ------------------
  384|      0|	  case fmtLongLongBinary:
  ------------------
  |  Branch (384:4): [True: 0, False: 27]
  ------------------
  385|      0|	    args[argsLen].ll = va_arg(argList, long long);
  386|      0|	    break;
  387|      0|#endif
  388|      0|#ifdef ULLONG_MAX
  389|      0|	  case fmtULongLongDecimal:
  ------------------
  |  Branch (389:4): [True: 0, False: 27]
  ------------------
  390|      0|	  case fmtULongLongHex:
  ------------------
  |  Branch (390:4): [True: 0, False: 27]
  ------------------
  391|      0|	  case fmtULongLongOctal:
  ------------------
  |  Branch (391:4): [True: 0, False: 27]
  ------------------
  392|      0|	  case fmtULongLongBinary:
  ------------------
  |  Branch (392:4): [True: 0, False: 27]
  ------------------
  393|      0|	    args[argsLen].ull = va_arg(argList, unsigned long long);
  394|      0|	    break;
  395|      0|#endif
  396|      0|	  case fmtDouble:
  ------------------
  |  Branch (396:4): [True: 0, False: 27]
  ------------------
  397|      0|	  case fmtDoubleTrim:
  ------------------
  |  Branch (397:4): [True: 0, False: 27]
  ------------------
  398|      0|	    args[argsLen].f = va_arg(argList, double);
  399|      0|	    break;
  400|      0|	  case fmtChar:
  ------------------
  |  Branch (400:4): [True: 0, False: 27]
  ------------------
  401|      0|	    args[argsLen].c = (char)va_arg(argList, int);
  402|      0|	    break;
  403|      0|	  case fmtString:
  ------------------
  |  Branch (403:4): [True: 0, False: 27]
  ------------------
  404|      0|	    args[argsLen].s = va_arg(argList, char *);
  405|      0|	    break;
  406|     27|	  case fmtGString:
  ------------------
  |  Branch (406:4): [True: 27, False: 0]
  ------------------
  407|     27|	    args[argsLen].gs = va_arg(argList, GString *);
  408|     27|	    break;
  409|     27|	  }
  410|     27|	  ++argsLen;
  411|     27|	}
  412|       |
  413|       |	// format the argument
  414|     27|	arg = args[idx];
  415|     27|	str = NULL;
  416|     27|	len = 0;
  417|     27|	switch (ft) {
  ------------------
  |  Branch (417:10): [True: 0, False: 27]
  ------------------
  418|      0|	case fmtIntDecimal:
  ------------------
  |  Branch (418:2): [True: 0, False: 27]
  ------------------
  419|      0|	  formatInt(arg.i, buf, sizeof(buf), zeroFill, width, 10, &str, &len);
  420|      0|	  break;
  421|      0|	case fmtIntHex:
  ------------------
  |  Branch (421:2): [True: 0, False: 27]
  ------------------
  422|      0|	  formatInt(arg.i, buf, sizeof(buf), zeroFill, width, 16, &str, &len);
  423|      0|	  break;
  424|      0|	case fmtIntOctal:
  ------------------
  |  Branch (424:2): [True: 0, False: 27]
  ------------------
  425|      0|	  formatInt(arg.i, buf, sizeof(buf), zeroFill, width, 8, &str, &len);
  426|      0|	  break;
  427|      0|	case fmtIntBinary:
  ------------------
  |  Branch (427:2): [True: 0, False: 27]
  ------------------
  428|      0|	  formatInt(arg.i, buf, sizeof(buf), zeroFill, width, 2, &str, &len);
  429|      0|	  break;
  430|      0|	case fmtUIntDecimal:
  ------------------
  |  Branch (430:2): [True: 0, False: 27]
  ------------------
  431|      0|	  formatUInt(arg.ui, buf, sizeof(buf), zeroFill, width, 10,
  432|      0|		     &str, &len);
  433|      0|	  break;
  434|      0|	case fmtUIntHex:
  ------------------
  |  Branch (434:2): [True: 0, False: 27]
  ------------------
  435|      0|	  formatUInt(arg.ui, buf, sizeof(buf), zeroFill, width, 16,
  436|      0|		     &str, &len);
  437|      0|	  break;
  438|      0|	case fmtUIntOctal:
  ------------------
  |  Branch (438:2): [True: 0, False: 27]
  ------------------
  439|      0|	  formatUInt(arg.ui, buf, sizeof(buf), zeroFill, width, 8, &str, &len);
  440|      0|	  break;
  441|      0|	case fmtUIntBinary:
  ------------------
  |  Branch (441:2): [True: 0, False: 27]
  ------------------
  442|      0|	  formatUInt(arg.ui, buf, sizeof(buf), zeroFill, width, 2, &str, &len);
  443|      0|	  break;
  444|      0|	case fmtLongDecimal:
  ------------------
  |  Branch (444:2): [True: 0, False: 27]
  ------------------
  445|      0|	  formatInt(arg.l, buf, sizeof(buf), zeroFill, width, 10, &str, &len);
  446|      0|	  break;
  447|      0|	case fmtLongHex:
  ------------------
  |  Branch (447:2): [True: 0, False: 27]
  ------------------
  448|      0|	  formatInt(arg.l, buf, sizeof(buf), zeroFill, width, 16, &str, &len);
  449|      0|	  break;
  450|      0|	case fmtLongOctal:
  ------------------
  |  Branch (450:2): [True: 0, False: 27]
  ------------------
  451|      0|	  formatInt(arg.l, buf, sizeof(buf), zeroFill, width, 8, &str, &len);
  452|      0|	  break;
  453|      0|	case fmtLongBinary:
  ------------------
  |  Branch (453:2): [True: 0, False: 27]
  ------------------
  454|      0|	  formatInt(arg.l, buf, sizeof(buf), zeroFill, width, 2, &str, &len);
  455|      0|	  break;
  456|      0|	case fmtULongDecimal:
  ------------------
  |  Branch (456:2): [True: 0, False: 27]
  ------------------
  457|      0|	  formatUInt(arg.ul, buf, sizeof(buf), zeroFill, width, 10,
  458|      0|		     &str, &len);
  459|      0|	  break;
  460|      0|	case fmtULongHex:
  ------------------
  |  Branch (460:2): [True: 0, False: 27]
  ------------------
  461|      0|	  formatUInt(arg.ul, buf, sizeof(buf), zeroFill, width, 16,
  462|      0|		     &str, &len);
  463|      0|	  break;
  464|      0|	case fmtULongOctal:
  ------------------
  |  Branch (464:2): [True: 0, False: 27]
  ------------------
  465|      0|	  formatUInt(arg.ul, buf, sizeof(buf), zeroFill, width, 8, &str, &len);
  466|      0|	  break;
  467|      0|	case fmtULongBinary:
  ------------------
  |  Branch (467:2): [True: 0, False: 27]
  ------------------
  468|      0|	  formatUInt(arg.ul, buf, sizeof(buf), zeroFill, width, 2, &str, &len);
  469|      0|	  break;
  470|      0|#ifdef LLONG_MAX
  471|      0|	case fmtLongLongDecimal:
  ------------------
  |  Branch (471:2): [True: 0, False: 27]
  ------------------
  472|      0|	  formatInt(arg.ll, buf, sizeof(buf), zeroFill, width, 10, &str, &len);
  473|      0|	  break;
  474|      0|	case fmtLongLongHex:
  ------------------
  |  Branch (474:2): [True: 0, False: 27]
  ------------------
  475|      0|	  formatInt(arg.ll, buf, sizeof(buf), zeroFill, width, 16, &str, &len);
  476|      0|	  break;
  477|      0|	case fmtLongLongOctal:
  ------------------
  |  Branch (477:2): [True: 0, False: 27]
  ------------------
  478|      0|	  formatInt(arg.ll, buf, sizeof(buf), zeroFill, width, 8, &str, &len);
  479|      0|	  break;
  480|      0|	case fmtLongLongBinary:
  ------------------
  |  Branch (480:2): [True: 0, False: 27]
  ------------------
  481|      0|	  formatInt(arg.ll, buf, sizeof(buf), zeroFill, width, 2, &str, &len);
  482|      0|	  break;
  483|      0|#endif
  484|      0|#ifdef ULLONG_MAX
  485|      0|	case fmtULongLongDecimal:
  ------------------
  |  Branch (485:2): [True: 0, False: 27]
  ------------------
  486|      0|	  formatUInt(arg.ull, buf, sizeof(buf), zeroFill, width, 10,
  487|      0|		     &str, &len);
  488|      0|	  break;
  489|      0|	case fmtULongLongHex:
  ------------------
  |  Branch (489:2): [True: 0, False: 27]
  ------------------
  490|      0|	  formatUInt(arg.ull, buf, sizeof(buf), zeroFill, width, 16,
  491|      0|		     &str, &len);
  492|      0|	  break;
  493|      0|	case fmtULongLongOctal:
  ------------------
  |  Branch (493:2): [True: 0, False: 27]
  ------------------
  494|      0|	  formatUInt(arg.ull, buf, sizeof(buf), zeroFill, width, 8,
  495|      0|		     &str, &len);
  496|      0|	  break;
  497|      0|	case fmtULongLongBinary:
  ------------------
  |  Branch (497:2): [True: 0, False: 27]
  ------------------
  498|      0|	  formatUInt(arg.ull, buf, sizeof(buf), zeroFill, width, 2,
  499|      0|		     &str, &len);
  500|      0|	  break;
  501|      0|#endif
  502|      0|	case fmtDouble:
  ------------------
  |  Branch (502:2): [True: 0, False: 27]
  ------------------
  503|      0|	  formatDouble(arg.f, buf, sizeof(buf), prec, gFalse, &str, &len);
  ------------------
  |  |   18|      0|#define gFalse 0
  ------------------
  504|      0|	  break;
  505|      0|	case fmtDoubleTrim:
  ------------------
  |  Branch (505:2): [True: 0, False: 27]
  ------------------
  506|      0|	  formatDouble(arg.f, buf, sizeof(buf), prec, gTrue, &str, &len);
  ------------------
  |  |   17|      0|#define gTrue 1
  ------------------
  507|      0|	  break;
  508|      0|	case fmtChar:
  ------------------
  |  Branch (508:2): [True: 0, False: 27]
  ------------------
  509|      0|	  buf[0] = arg.c;
  510|      0|	  str = buf;
  511|      0|	  len = 1;
  512|      0|	  reverseAlign = !reverseAlign;
  513|      0|	  break;
  514|      0|	case fmtString:
  ------------------
  |  Branch (514:2): [True: 0, False: 27]
  ------------------
  515|      0|	  if (arg.s) {
  ------------------
  |  Branch (515:8): [True: 0, False: 0]
  ------------------
  516|      0|	    str = arg.s;
  517|      0|	    len = (int)strlen(str);
  518|      0|	  } else {
  519|      0|	    str = "(null)";
  520|      0|	    len = 6;
  521|      0|	  }
  522|      0|	  reverseAlign = !reverseAlign;
  523|      0|	  break;
  524|     27|	case fmtGString:
  ------------------
  |  Branch (524:2): [True: 27, False: 0]
  ------------------
  525|     27|	  if (arg.gs) {
  ------------------
  |  Branch (525:8): [True: 27, False: 0]
  ------------------
  526|     27|	    str = arg.gs->getCString();
  527|     27|	    len = arg.gs->getLength();
  528|     27|	  } else {
  529|      0|	    str = "(null)";
  530|      0|	    len = 6;
  531|      0|	  }
  532|     27|	  reverseAlign = !reverseAlign;
  533|     27|	  break;
  534|      0|	case fmtSpace:
  ------------------
  |  Branch (534:2): [True: 0, False: 27]
  ------------------
  535|      0|	  str = buf;
  536|      0|	  len = 0;
  537|      0|	  width = arg.i;
  538|      0|	  break;
  539|     27|	}
  540|       |
  541|       |	// append the formatted arg, handling width and alignment
  542|     27|	if (!reverseAlign && len < width) {
  ------------------
  |  Branch (542:6): [True: 0, False: 27]
  |  Branch (542:23): [True: 0, False: 0]
  ------------------
  543|      0|	  for (i = len; i < width; ++i) {
  ------------------
  |  Branch (543:18): [True: 0, False: 0]
  ------------------
  544|      0|	    append(' ');
  545|      0|	  }
  546|      0|	}
  547|     27|	append(str, len);
  548|     27|	if (reverseAlign && len < width) {
  ------------------
  |  Branch (548:6): [True: 27, False: 0]
  |  Branch (548:22): [True: 0, False: 27]
  ------------------
  549|      0|	  for (i = len; i < width; ++i) {
  ------------------
  |  Branch (549:18): [True: 0, False: 0]
  ------------------
  550|      0|	    append(' ');
  551|      0|	  }
  552|      0|	}
  553|     27|      }
  554|       |
  555|     54|    } else if (*p0 == '}') {
  ------------------
  |  Branch (555:16): [True: 0, False: 54]
  ------------------
  556|      0|      ++p0;
  557|      0|      if (*p0 == '}') {
  ------------------
  |  Branch (557:11): [True: 0, False: 0]
  ------------------
  558|      0|	++p0;
  559|      0|      }
  560|      0|      append('}');
  561|       |      
  562|     54|    } else {
  563|    567|      for (p1 = p0 + 1; *p1 && *p1 != '{' && *p1 != '}'; ++p1) ;
  ------------------
  |  Branch (563:25): [True: 540, False: 27]
  |  Branch (563:32): [True: 513, False: 27]
  |  Branch (563:46): [True: 513, False: 0]
  ------------------
  564|     54|      append(p0, (int)(p1 - p0));
  565|     54|      p0 = p1;
  566|     54|    }
  567|     81|  }
  568|       |
  569|     27|  gfree(args);
  570|     27|  return this;
  571|     27|}
_ZN7GString9upperCaseEv:
  753|     27|GString *GString::upperCase() {
  754|     27|  int i;
  755|       |
  756|    270|  for (i = 0; i < length; ++i) {
  ------------------
  |  Branch (756:15): [True: 243, False: 27]
  ------------------
  757|    243|    if (islower(s[i] & 0xff)) {
  ------------------
  |  Branch (757:9): [True: 216, False: 27]
  ------------------
  758|    216|      s[i] = (char)toupper(s[i] & 0xff);
  759|    216|    }
  760|    243|  }
  761|     27|  return this;
  762|     27|}
_ZN7GString9lowerCaseEv:
  764|     27|GString *GString::lowerCase() {
  765|     27|  int i;
  766|       |
  767|    270|  for (i = 0; i < length; ++i) {
  ------------------
  |  Branch (767:15): [True: 243, False: 27]
  ------------------
  768|    243|    if (isupper(s[i] & 0xff)) {
  ------------------
  |  Branch (768:9): [True: 0, False: 243]
  ------------------
  769|      0|      s[i] = (char)tolower(s[i] & 0xff);
  770|      0|    }
  771|    243|  }
  772|     27|  return this;
  773|     27|}
_ZN7GString6resizeEi:
  108|    999|inline void GString::resize(int length1) {
  109|    999|  char *s1;
  110|       |
  111|    999|  if (length1 < 0) {
  ------------------
  |  Branch (111:7): [True: 0, False: 999]
  ------------------
  112|      0|    gMemError("GString::resize() with negative length");
  113|      0|  }
  114|    999|  if (!s) {
  ------------------
  |  Branch (114:7): [True: 108, False: 891]
  ------------------
  115|    108|    s = new char[size(length1)];
  116|    891|  } else if (size(length1) != size(length)) {
  ------------------
  |  Branch (116:14): [True: 81, False: 810]
  ------------------
  117|     81|    s1 = new char[size(length1)];
  118|     81|    if (length1 < length) {
  ------------------
  |  Branch (118:9): [True: 0, False: 81]
  ------------------
  119|      0|      memcpy(s1, s, length1);
  120|      0|      s1[length1] = '\0';
  121|     81|    } else {
  122|     81|      memcpy(s1, s, length + 1);
  123|     81|    }
  124|     81|    delete[] s;
  125|     81|    s = s1;
  126|     81|  }
  127|    999|}
GString.cc:_ZL4sizei:
   98|  1.97k|static inline int size(int len) {
   99|  1.97k|  int delta;
  100|  4.26k|  for (delta = 8; delta < len && delta < 0x100000; delta <<= 1) ;
  ------------------
  |  Branch (100:19): [True: 2.29k, False: 1.97k]
  |  Branch (100:34): [True: 2.29k, False: 0]
  ------------------
  101|  1.97k|  if (len > INT_MAX - delta) {
  ------------------
  |  Branch (101:7): [True: 0, False: 1.97k]
  ------------------
  102|      0|    gMemError("Integer overflow in GString::size()");
  103|      0|  }
  104|       |  // this is ((len + 1) + (delta - 1)) & ~(delta - 1)
  105|  1.97k|  return (len + delta) & ~(delta - 1);
  106|  1.97k|}

_ZN7GString4copyEv:
   38|     27|  GString *copy() { return new GString(this); }
_ZN7GString9getLengthEv:
   76|    891|  int getLength() { return length; }
_ZN7GString10getCStringEv:
   79|    162|  char *getCString() { return s; }
_ZN7GString7getCharEi:
   82|    810|  char getChar(int i) { return s[i]; }

_Z7gmalloci:
  139|     27|void *gmalloc(int size) GMEM_EXCEP {
  140|     27|  void *p;
  141|       |
  142|     27|  if (size < 0) {
  ------------------
  |  Branch (142:7): [True: 0, False: 27]
  ------------------
  143|      0|    gMemError("Invalid memory allocation size");
  144|      0|  }
  145|     27|  if (size == 0) {
  ------------------
  |  Branch (145:7): [True: 0, False: 27]
  ------------------
  146|      0|    return NULL;
  147|      0|  }
  148|     27|  if (!(p = malloc(size))) {
  ------------------
  |  Branch (148:7): [True: 0, False: 27]
  ------------------
  149|      0|    gMemError("Out of memory");
  150|      0|  }
  151|     27|  return p;
  152|     27|}
_Z8gmallocnii:
  204|     27|void *gmallocn(int nObjs, int objSize) GMEM_EXCEP {
  205|     27|  int n;
  206|       |
  207|     27|  if (nObjs == 0) {
  ------------------
  |  Branch (207:7): [True: 0, False: 27]
  ------------------
  208|      0|    return NULL;
  209|      0|  }
  210|     27|  n = nObjs * objSize;
  211|     27|  if (objSize <= 0 || nObjs < 0 || nObjs >= INT_MAX / objSize) {
  ------------------
  |  Branch (211:7): [True: 0, False: 27]
  |  Branch (211:23): [True: 0, False: 27]
  |  Branch (211:36): [True: 0, False: 27]
  ------------------
  212|      0|    gMemError("Bogus memory allocation size");
  213|      0|  }
  214|     27|  return gmalloc(n);
  215|     27|}
_Z5gfreePv:
  307|     27|void gfree(void *p) {
  308|       |#ifdef DEBUG_MEM
  309|       |  size_t size;
  310|       |  GMemHdr *hdr;
  311|       |  unsigned long *trl, *clr;
  312|       |
  313|       |  if (p) {
  314|       |    hdr = (GMemHdr *)((char *)p - gMemHdrSize);
  315|       |    gMemLock;
  316|       |    if (hdr->magic == gMemMagic &&
  317|       |	((hdr->prev == NULL) == (hdr == gMemHead)) &&
  318|       |	((hdr->next == NULL) == (hdr == gMemTail))) {
  319|       |      if (hdr->prev) {
  320|       |	hdr->prev->next = hdr->next;
  321|       |      } else {
  322|       |	gMemHead = hdr->next;
  323|       |      }
  324|       |      if (hdr->next) {
  325|       |	hdr->next->prev = hdr->prev;
  326|       |      } else {
  327|       |	gMemTail = hdr->prev;
  328|       |      }
  329|       |      --gMemAlloc;
  330|       |      gMemInUse -= hdr->size;
  331|       |      gMemUnlock;
  332|       |      size = gMemDataSize64(hdr->size);
  333|       |      trl = (unsigned long *)((char *)hdr + gMemHdrSize + size);
  334|       |      if (*trl != gMemDeadVal) {
  335|       |	fprintf(stderr, "Overwrite past end of block %d at address %p\n",
  336|       |		hdr->index, p);
  337|       |      }
  338|       |      for (clr = (unsigned long *)hdr; clr <= trl; ++clr) {
  339|       |	*clr = gMemDeadVal;
  340|       |      }
  341|       |      free(hdr);
  342|       |    } else {
  343|       |      gMemUnlock;
  344|       |      fprintf(stderr, "Attempted to free bad address %p\n", p);
  345|       |    }
  346|       |  }
  347|       |#else
  348|     27|  if (p) {
  ------------------
  |  Branch (348:7): [True: 27, False: 0]
  ------------------
  349|     27|    free(p);
  350|     27|  }
  351|     27|#endif
  352|     27|}

_Z5error13ErrorCategorylPKcz:
   46|     27|		 const char *msg, ...) {
   47|     27|  va_list args;
   48|     27|  GString *s, *sanitized;
   49|     27|  char c;
   50|     27|  int i;
   51|       |
   52|       |  // NB: this can be called before the globalParams object is created
   53|     27|  if (!errorCbk && globalParams && globalParams->getErrQuiet()) {
  ------------------
  |  Branch (53:7): [True: 27, False: 0]
  |  Branch (53:20): [True: 0, False: 27]
  |  Branch (53:36): [True: 0, False: 0]
  ------------------
   54|      0|    return;
   55|      0|  }
   56|     27|  va_start(args, msg);
   57|     27|  s = GString::formatv(msg, args);
   58|     27|  va_end(args);
   59|       |
   60|       |  // remove non-printable characters, just in case they might cause
   61|       |  // problems for the terminal program
   62|     27|  sanitized = new GString();
   63|    837|  for (i = 0; i < s->getLength(); ++i) {
  ------------------
  |  Branch (63:15): [True: 810, False: 27]
  ------------------
   64|    810|    c = s->getChar(i);
   65|    810|    if (c >= 0x20 && c <= 0x7e) {
  ------------------
  |  Branch (65:9): [True: 810, False: 0]
  |  Branch (65:22): [True: 810, False: 0]
  ------------------
   66|    810|      sanitized->append(c);
   67|    810|    } else {
   68|      0|      sanitized->appendf("<{0:02x}>", c & 0xff);
   69|      0|    }
   70|    810|  }
   71|       |
   72|     27|  if (errorCbk) {
  ------------------
  |  Branch (72:7): [True: 0, False: 27]
  ------------------
   73|      0|    (*errorCbk)(errorCbkData, category, (int)pos, sanitized->getCString());
   74|     27|  } else {
   75|     27|    fflush(stdout);
   76|     27|    if (pos >= 0) {
  ------------------
  |  Branch (76:9): [True: 0, False: 27]
  ------------------
   77|      0|      fprintf(stderr, "%s (%d): %s\n",
   78|      0|	      errorCategoryNames[category], (int)pos, sanitized->getCString());
   79|     27|    } else {
   80|     27|      fprintf(stderr, "%s: %s\n",
   81|     27|	      errorCategoryNames[category], sanitized->getCString());
   82|     27|    }
   83|     27|    fflush(stderr);
   84|     27|  }
   85|       |
   86|     27|  delete s;
   87|     27|  delete sanitized;
   88|     27|}

_ZN6ObjectC2Ev:
   85|     27|    type(objNone) {}

_ZN9OutputDevC2Ev:
   39|     27|  OutputDev() {}
_ZN9OutputDevD2Ev:
   42|     27|  virtual ~OutputDev() {}

_ZN6PDFDocC2EP7GStringS1_S1_P7PDFCore:
   61|     27|	       GString *userPassword, PDFCore *coreA) {
   62|     27|  Object obj;
   63|     27|  GString *fileName1, *fileName2;
   64|       |#ifdef _WIN32
   65|       |  int n, i;
   66|       |#endif
   67|       |
   68|     27|  init(coreA);
   69|       |
   70|     27|  fileName = fileNameA;
   71|       |#ifdef _WIN32
   72|       |  n = fileName->getLength();
   73|       |  fileNameU = (wchar_t *)gmallocn(n + 1, sizeof(wchar_t));
   74|       |  for (i = 0; i < n; ++i) {
   75|       |    fileNameU[i] = (wchar_t)(fileName->getChar(i) & 0xff);
   76|       |  }
   77|       |  fileNameU[n] = L'\0';
   78|       |#endif
   79|       |
   80|     27|  fileName1 = fileName;
   81|       |
   82|       |  // try to open file
   83|     27|  fileName2 = NULL;
   84|       |#ifdef VMS
   85|       |  if (!(file = fopen(fileName1->getCString(), fopenReadMode, "ctx=stm"))) {
   86|       |    error(errIO, -1, "Couldn't open file '{0:t}'", fileName1);
   87|       |    errCode = errOpenFile;
   88|       |    return;
   89|       |  }
   90|       |#else
   91|     27|  if (!(file = fopen(fileName1->getCString(), fopenReadMode))) {
  ------------------
  |  |   53|     27|#  define fopenReadMode "rb"
  ------------------
  |  Branch (91:7): [True: 27, False: 0]
  ------------------
   92|     27|    fileName2 = fileName->copy();
   93|     27|    fileName2->lowerCase();
   94|     27|    if (!(file = fopen(fileName2->getCString(), fopenReadMode))) {
  ------------------
  |  |   53|     27|#  define fopenReadMode "rb"
  ------------------
  |  Branch (94:9): [True: 27, False: 0]
  ------------------
   95|     27|      fileName2->upperCase();
   96|     27|      if (!(file = fopen(fileName2->getCString(), fopenReadMode))) {
  ------------------
  |  |   53|     27|#  define fopenReadMode "rb"
  ------------------
  |  Branch (96:11): [True: 27, False: 0]
  ------------------
   97|     27|	error(errIO, -1, "Couldn't open file '{0:t}'", fileName);
   98|     27|	delete fileName2;
   99|     27|	errCode = errOpenFile;
  ------------------
  |  |   14|     27|#define errOpenFile         1	// couldn't open the PDF file
  ------------------
  100|     27|	return;
  101|     27|      }
  102|     27|    }
  103|      0|    delete fileName2;
  104|      0|  }
  105|      0|#endif
  106|       |
  107|       |  // create stream
  108|      0|  obj.initNull();
  109|      0|  str = new FileStream(file, 0, gFalse, 0, &obj);
  ------------------
  |  |   18|      0|#define gFalse 0
  ------------------
  110|       |
  111|      0|  ok = setup(ownerPassword, userPassword);
  112|      0|}
_ZN6PDFDoc4initEP7PDFCore:
  246|     27|void PDFDoc::init(PDFCore *coreA) {
  247|     27|  ok = gFalse;
  ------------------
  |  |   18|     27|#define gFalse 0
  ------------------
  248|     27|  errCode = errNone;
  ------------------
  |  |   12|     27|#define errNone             0	// no error
  ------------------
  249|     27|  core = coreA;
  250|     27|  file = NULL;
  251|     27|  str = NULL;
  252|     27|  xref = NULL;
  253|     27|  catalog = NULL;
  254|     27|  annots = NULL;
  255|     27|#ifndef DISABLE_OUTLINE
  256|     27|  outline = NULL;
  257|     27|#endif
  258|     27|  optContent = NULL;
  259|     27|}
_ZN6PDFDocD2Ev:
  333|     27|PDFDoc::~PDFDoc() {
  334|     27|  if (optContent) {
  ------------------
  |  Branch (334:7): [True: 0, False: 27]
  ------------------
  335|      0|    delete optContent;
  336|      0|  }
  337|     27|#ifndef DISABLE_OUTLINE
  338|     27|  if (outline) {
  ------------------
  |  Branch (338:7): [True: 0, False: 27]
  ------------------
  339|      0|    delete outline;
  340|      0|  }
  341|     27|#endif
  342|     27|  if (annots) {
  ------------------
  |  Branch (342:7): [True: 0, False: 27]
  ------------------
  343|      0|    delete annots;
  344|      0|  }
  345|     27|  if (catalog) {
  ------------------
  |  Branch (345:7): [True: 0, False: 27]
  ------------------
  346|      0|    delete catalog;
  347|      0|  }
  348|     27|  if (xref) {
  ------------------
  |  Branch (348:7): [True: 0, False: 27]
  ------------------
  349|      0|    delete xref;
  350|      0|  }
  351|     27|  if (str) {
  ------------------
  |  Branch (351:7): [True: 0, False: 27]
  ------------------
  352|      0|    delete str;
  353|      0|  }
  354|     27|  if (file) {
  ------------------
  |  Branch (354:7): [True: 0, False: 27]
  ------------------
  355|      0|    fclose(file);
  356|      0|  }
  357|     27|  if (fileName) {
  ------------------
  |  Branch (357:7): [True: 27, False: 0]
  ------------------
  358|     27|    delete fileName;
  359|     27|  }
  360|       |#ifdef _WIN32
  361|       |  if (fileNameU) {
  362|       |    gfree(fileNameU);
  363|       |  }
  364|       |#endif
  365|     27|}

_ZN6PDFDoc4isOkEv:
   57|     27|  GBool isOk() { return ok; }

